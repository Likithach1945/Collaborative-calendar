###############################################
# Application Configuration (Sensitive Safe)  #
#                                             #
# IMPORTANT: Do NOT place real secrets here.  #
# Use environment variables in deployment.    #
# Fallbacks below are for local DEV only.     #
###############################################

# Server (supports both Render PORT or custom SERVER_PORT)
server.port=${PORT:${SERVER_PORT:8443}}
spring.application.name=calendar-backend

# Database (MySQL)
# Construct URL from individual parts so each can be overridden.
# For production, set DB_HOST, DB_PORT, DB_NAME with no real secrets committed.
spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:calendardb}?useSSL=${DB_USE_SSL:false}&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=${DB_USERNAME:calendaruser}
spring.datasource.password=${DB_PASSWORD:changeMePassword}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Flyway
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration

# OAuth2 - Google Login Configuration (ENV required in non-dev)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:dev-google-client-id.apps.googleusercontent.com}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:dev-client-secret-change-me}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI:http://localhost:8443/login/oauth2/code/google}
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# CORS Configuration (comma-separated origins & methods)
# Configure ALLOWED_ORIGINS env var in deployment (e.g. https://your-frontend,https://admin.your-frontend)
cors.allowed-origins=${ALLOWED_ORIGINS:http://localhost:5173}
cors.allowed-methods=${ALLOWED_METHODS:GET,POST,PUT,DELETE,PATCH,OPTIONS}

# Video Conference Configuration
# Using Jitsi Meet - open source, free, reliable
# Public instance: https://meet.jit.si/
jitsi.base-url=https://meet.jit.si/

# JWT (Use a long random string in production)
jwt.secret=${JWT_SECRET:devJwtSecretChangeMe}
jwt.expiration=${JWT_EXPIRATION_MS:86400000}

# Logging
logging.level.com.example.calendar=INFO
logging.level.org.springframework.security=DEBUG

# Caching
# Set to true to enable Redis caching (requires Redis server)
# When false or missing, uses in-memory cache
app.cache.redis.enabled=false

# Redis Configuration (only used when app.cache.redis.enabled=true)
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
# spring.data.redis.password=${REDIS_PASSWORD:}
# spring.data.redis.timeout=${REDIS_TIMEOUT:2000ms}

# Actuator Endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.metrics.export.prometheus.enabled=true
management.info.env.enabled=true

# Info Endpoint
info.app.name=@project.name@
info.app.version=@project.version@
info.app.description=@project.description@

# Email Configuration (SMTP)
# Uncomment and configure to enable real email sending (set env vars in deployment platform)
# spring.mail.host=${SMTP_HOST:smtp.gmail.com}
# spring.mail.port=${SMTP_PORT:587}
# spring.mail.username=${SMTP_USERNAME}
# spring.mail.password=${SMTP_PASSWORD}
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true
# spring.mail.properties.mail.smtp.starttls.required=true

