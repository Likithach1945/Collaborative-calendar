openapi: 3.1.0
info:
  title: Calendar Application Core API
  version: 0.1.0
  description: REST API for calendar application (MVP)
servers:
  - url: https://api.example.com/v1
paths:
  /auth/login/google:
    get:
      summary: Initiate Google OAuth2 login
      operationId: initiateGoogleLogin
      responses:
        '302':
          description: Redirect to Google OAuth consent screen
  /auth/callback/google:
    get:
      summary: OAuth2 callback endpoint
      operationId: googleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSession'
        '401': { description: Invalid or expired code }
  /users/me:
    get:
      summary: Get current authenticated user profile
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401': { description: Unauthorized }
  /events:
    get:
      summary: List events in a time range
      operationId: listEvents
      security:
        - bearerAuth: []
      parameters:
        - name: start
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Events returned
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Event' }
    post:
      summary: Create event with invitations
      operationId: createEvent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }
        '400': { description: Validation error }
  /events/{eventId}:
    get:
      summary: Get event detail
      operationId: getEvent
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200': { description: Event detail, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }
        '404': { description: Not found }
    patch:
      summary: Update event (e.g., time change after proposal acceptance)
      operationId: updateEvent
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '200': { description: Updated }
        '409': { description: Conflict (optimistic lock failure) }
  /events/{eventId}/invitations:
    get:
      summary: List invitations for event
      operationId: listInvitations
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Invitations, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Invitation' } } } } }
  /invitations/{invitationId}:
    patch:
      summary: Respond to invitation (accept/decline/propose)
      operationId: respondInvitation
      security:
        - bearerAuth: []
      parameters:
        - name: invitationId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationResponse'
      responses:
        '200': { description: Updated invitation }
        '400': { description: Invalid transition }
        '404': { description: Not found }
  /availability:
    post:
      summary: Compute availability & suggestions across participants
      operationId: computeAvailability
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityRequest'
      responses:
        '200': { description: Suggestions & free/busy, content: { application/json: { schema: { $ref: '#/components/schemas/AvailabilityResponse' } } } }
        '422': { description: No common availability }
  /ics/import:
    post:
      summary: Import events from ICS file
      operationId: importIcs
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200': { description: Import summary, content: { application/json: { schema: { $ref: '#/components/schemas/IcsImportSummary' } } } }
        '400': { description: Malformed ICS }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthSession:
      type: object
      properties:
        accessToken: { type: string }
        user: { $ref: '#/components/schemas/User' }
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        displayName: { type: string }
        timezone: { type: string }
    Event:
      type: object
      properties:
        id: { type: string }
        organizerId: { type: string }
        title: { type: string }
        description: { type: string }
        startDateTime: { type: string, format: date-time }
        endDateTime: { type: string, format: date-time }
        timezone: { type: string }
        recurrenceRule: { type: string }
        videoConferenceLink: { type: string }
        location: { type: string }
    Invitation:
      type: object
      properties:
        id: { type: string }
        eventId: { type: string }
        recipientEmail: { type: string, format: email }
        status: { type: string, enum: [pending, accepted, declined, proposed, superseded] }
        proposedStart: { type: string, format: date-time }
        proposedEnd: { type: string, format: date-time }
        responseNote: { type: string }
        respondedAt: { type: string, format: date-time }
    CreateEventRequest:
      type: object
      required: [title, startDateTime, endDateTime, participants]
      properties:
        title: { type: string }
        description: { type: string }
        startDateTime: { type: string, format: date-time }
        endDateTime: { type: string, format: date-time }
        timezone: { type: string }
        participants:
          type: array
          items:
            type: string
            format: email
        videoConference: { type: boolean, description: 'If true generate Google Meet link' }
        recurrenceRule: { type: string }
    UpdateEventRequest:
      type: object
      properties:
        startDateTime: { type: string, format: date-time }
        endDateTime: { type: string, format: date-time }
    InvitationResponse:
      type: object
      required: [action]
      properties:
        action: { type: string, enum: [accept, decline, propose] }
        proposedStart: { type: string, format: date-time }
        proposedEnd: { type: string, format: date-time }
        note: { type: string }
    AvailabilityRequest:
      type: object
      required: [participantEmails, start, end, durationMinutes]
      properties:
        participantEmails:
          type: array
          items: { type: string, format: email }
        start: { type: string, format: date-time }
        end: { type: string, format: date-time }
        durationMinutes: { type: integer, minimum: 1 }
    AvailabilityResponse:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: object
            properties:
              startDateTime: { type: string, format: date-time }
              endDateTime: { type: string, format: date-time }
              score: { type: number }
        freeBusy:
          type: array
          items:
            type: object
            properties:
              email: { type: string, format: email }
              busy:
                type: array
                items:
                  type: object
                  properties:
                    startDateTime: { type: string, format: date-time }
                    endDateTime: { type: string, format: date-time }
    IcsImportSummary:
      type: object
      properties:
        totalEvents: { type: integer }
        imported: { type: integer }
        skippedDuplicates: { type: integer }
        errors:
          type: array
          items: { type: string }
